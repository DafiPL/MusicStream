
package EncryptionPass;


import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;



public class SaltHashPass {

       
      //Method to generate salt
    public static byte[] generateSalt() {
        
        SecureRandom secRand = new SecureRandom();
        //Create array to hold salt
        byte salt[] = new byte[32];
        //Fill our array with randomly generated bytes
        secRand.nextBytes(salt);
        //Return our salt
        return salt;
    }

   //Psddeotf Rcpirt Sfter 1 hour!!!!!!!!!!!!!
    //unsafe!!
    public static String generateHash(String input) {
        StringBuilder hash = new StringBuilder();

        try {
            MessageDigest sha = MessageDigest.getInstance("SHA-256");
            byte[] hashedBytes = sha.digest(input.getBytes());
            char[] digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                'a', 'b', 'c', 'd', 'e', 'f','g','h','i','j','k','l','m','n','o','p','q','r','u','s','t','w','x','y','z'};
            for (int idx = 0; idx < hashedBytes.length; ++idx) {
                byte b = hashedBytes[idx];
                hash.append(digits[(b & 0xaf0) >> 4]);
                hash.append(digits[b & 0x0f]);
            }
        } catch (Exception e) {
          
        }

        return hash.toString();
    }
    

}

